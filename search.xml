<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Cloud 组件简要记录</title>
      <link href="/2025/02/11/Spring-Cloud-%E7%BB%84%E4%BB%B6%E7%AE%80%E8%A6%81%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/02/11/Spring-Cloud-%E7%BB%84%E4%BB%B6%E7%AE%80%E8%A6%81%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-注册中心"><a href="#1-注册中心" class="headerlink" title="1.注册中心"></a>1.注册中心</h2><p>Nacos&#x2F;Eureka</p><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka:"></a>Eureka:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AP  </span><br><span class="line">服务注册中心 2.0后停止开源</span><br><span class="line">短连接,定时发送和服务进行联系</span><br><span class="line">服务异常剔除时间最长可能需要3分钟 30s心跳+90s剔除 +60s下线</span><br></pre></td></tr></table></figure><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos:"></a>Nacos:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CP/AP ephemeral=true</span><br><span class="line">服务注册中心, 配置中心, 健康检查, 负载君合,故障恢复,动态配置</span><br><span class="line">长连接,netty和服务直接连接</span><br><span class="line">心跳5s+15s设置不健康+30s剔除 </span><br></pre></td></tr></table></figure><h2 id="2-实现远程调用的方式"><a href="#2-实现远程调用的方式" class="headerlink" title="2.实现远程调用的方式"></a>2.<strong>实现远程调用的方式</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Http接口（web接口、RestTemplate+Okhttp）、Feign、RPC调用（Dubbo、Socket编程）、Webservice。</span><br></pre></td></tr></table></figure><h3 id="Feign和OpenFeign"><a href="#Feign和OpenFeign" class="headerlink" title="Feign和OpenFeign"></a>Feign和OpenFeign</h3><h4 id="Feign"><a href="#Feign" class="headerlink" title="Feign:"></a>Feign:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Feign集成了Ribbon、RestTemplate实现了负载均衡的执行Http调用  停止迭代</span><br></pre></td></tr></table></figure><h4 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign:"></a>OpenFeign:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OpenFeign是springcloud在Feign的基础上支持了SpringMVC的注解,通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务</span><br><span class="line">OpenFeign:</span><br><span class="line">使用ApacheHttpClient</span><br><span class="line">使用OkHttp</span><br><span class="line">代替URLConection</span><br><span class="line">开启g-zip优化</span><br></pre></td></tr></table></figure><h3 id="Dubbo和Feign"><a href="#Dubbo和Feign" class="headerlink" title="Dubbo和Feign"></a>Dubbo和Feign</h3><h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo:"></a>Dubbo:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RPC: 多协议:dubbo,rmi,http,redis,使用netty,长连接,高并发稳定,方法级服务粒度,可异步调用</span><br><span class="line">随机,权重,最少活跃,一致性hash</span><br><span class="line">容错支持 </span><br><span class="line">failOver 默认 会做负载均衡</span><br><span class="line">failFast 快速失败 不重试</span><br><span class="line">Failsafe 忽略异常,不关心是否调用成功</span><br><span class="line">FailBack 自动记录失败队列,定时重试,适合异步执行</span><br><span class="line">BroadCast 广播</span><br><span class="line">Forking 同时调用多个服务</span><br><span class="line">可以设置retry重试和超时设置</span><br></pre></td></tr></table></figure><h4 id="Feign-1"><a href="#Feign-1" class="headerlink" title="Feign:"></a>Feign:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Http/REST 实现,Http接口级服务粒度,对外暴漏http接口,短连接,轻量级</span><br><span class="line">默认使用Ribbon负载均衡 随机,规则轮训,空闲策略,响应时间策略</span><br><span class="line">默认使用Hystix做熔断提供服务降级,服务熔断,依赖隔离,监控</span><br></pre></td></tr></table></figure><h2 id="3-熔断隔离限流"><a href="#3-熔断隔离限流" class="headerlink" title="3.熔断隔离限流"></a>3.熔断隔离限流</h2><h3 id="Hystrix和Sentinel"><a href="#Hystrix和Sentinel" class="headerlink" title="Hystrix和Sentinel"></a>Hystrix和Sentinel</h3><h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix:"></a>Hystrix:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">熔断和隔离位主的容错机制,快速失败, 提供failback机制</span><br><span class="line">熔断策略:失败比率</span><br><span class="line">隔离策略:并发数</span><br><span class="line">限流:基于qps </span><br></pre></td></tr></table></figure><h4 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel:"></a>Sentinel:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多样化流量控制,实时监测,系统负载保护,熔断降级| 轻量级,高性能,流量控制,常用的流量整形策略:直接拒绝,慢启动预热模式,匀速器模式:Leaky Bucket 漏桶算法</span><br><span class="line">熔断策略: 响应时间或者失败比率</span><br><span class="line">隔离策略:线程池隔离和信号量隔离</span><br></pre></td></tr></table></figure><h2 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4.负载均衡"></a>4.负载均衡</h2><h3 id="Nginx-Ribbon-LoadBalance"><a href="#Nginx-Ribbon-LoadBalance" class="headerlink" title="Nginx,Ribbon,LoadBalance"></a>Nginx,Ribbon,LoadBalance</h3><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端负载均衡工具, 提供 均衡算法和服务调用  本地负载均衡 缓存在jvm本地, 实现rpc调用</span><br><span class="line">策略IRule: 轮询RoundRobinRule 随机RandomRule RetryRule轮询重试 ,BestAvailableRule并发最小服务,AvailablilityFiteringRule,过滤故障并发最小,ZoneAvoidanceRule 默认 根据响应时间加权</span><br><span class="line">工作流程:</span><br><span class="line">从注册中心获取服务列表</span><br><span class="line">根据用户指定的策略，找到目标服务提供者</span><br><span class="line">通过Feign或者OpenFeign，Web客户端调用工具完成用户请求 </span><br></pre></td></tr></table></figure><h4 id="LoadBalance"><a href="#LoadBalance" class="headerlink" title="LoadBalance"></a>LoadBalance</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ribbon停更,使用loadBalance 均摊 高可用HA    默认轮询 Hoxton.SR10 增加随机</span><br></pre></td></tr></table></figure><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">服务端负载均衡工具,客户端请求全部通过nginx转发  </span><br><span class="line">用途:</span><br><span class="line">1.静态http服务器 2.反向代理服务器 3.负载均衡 4.正向代理 5.解决跨域问题 6.限流</span><br><span class="line"></span><br><span class="line">负载均衡算法:</span><br><span class="line">轮询(默认),</span><br><span class="line">权重(weight),</span><br><span class="line">ip_hash(根据ip分配方式) </span><br><span class="line">least_conn(最少连接),</span><br><span class="line">fair(第三方,响应时间方式) </span><br><span class="line">url_hash(根据url方式)</span><br></pre></td></tr></table></figure><h2 id="5-网关"><a href="#5-网关" class="headerlink" title="5.网关"></a>5.网关</h2><h3 id="Zuul和Gateway"><a href="#Zuul和Gateway" class="headerlink" title="Zuul和Gateway"></a>Zuul和Gateway</h3><h4 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul:"></a>Zuul:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阻塞api,不支持长连接 底层servlet 处理http请求 同步 没有实现限流和复杂均衡 2.0也使用netty非阻塞</span><br></pre></td></tr></table></figure><h4 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway:"></a>Gateway:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">依赖webFlux 底层环境netty 支持异步 实现限流和复杂均衡 反向代理,鉴权,流控,熔断,日志监控,路由转发</span><br><span class="line">三大核心:</span><br><span class="line">Route:由id,uri,predicate组成 </span><br><span class="line">Predicate: 匹配路由</span><br><span class="line">Filter:过滤器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud  </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务简单记录</title>
      <link href="/2025/02/11/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/02/11/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务具有 4 个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为 ACID 特性。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Atomicity（原子性）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复到事务开始前的状态，就像这个事务从来没有执行过一样。</span><br><span class="line">- Consistency（一致性）：在事务开始前、进行中、结束后，数据库的完整性没有被破坏。完整性包括外键约束、应用定义的等约束不会被破坏。</span><br><span class="line">- Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。</span><br><span class="line">- Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</span><br></pre></td></tr></table></figure><p><strong>分布式事务会部分遵循 ACID 规范：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-     原子性：严格遵循</span><br><span class="line">-     一致性：事务完成后的一致性严格遵循；事务中的一致性可适当放宽</span><br><span class="line">-     隔离性：并行事务间不可影响；事务中间结果可见性允许安全放宽</span><br><span class="line">-     持久性：严格遵循</span><br></pre></td></tr></table></figure><p>因为事务过程中，不是一致的，但事务会最终完成，最终达到一致，所以我们把分布式事务称为“最终一致”</p><h2 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 两阶段提交，将事务的提交过程分为资源准备和资源提交两个阶段，并且由事务协调者来协调所有事务参与者，如果准备阶段所有事务参与者都预留资源成功，则进行第二阶段的资源提交，否则事务协调者回滚资源。</span><br><span class="line">- 两段提交  准备阶段,TC--&gt;TM--&gt;RM 提交阶段,commit或者rollback</span><br><span class="line">- 性能问题, 阻塞的,不适合高并发,可能部分提交导致数据不一致</span><br><span class="line">- 无法解决commit 后宕机,协调者和消费参与者同时宕机</span><br><span class="line">-  AT模式 无业务入侵 最终一致性的两阶段提交 默认</span><br><span class="line">-  XA模式 无业务入侵 强一致性的 牺牲可用性</span><br></pre></td></tr></table></figure><p>成功情况<br><img src="/img/v2-c6bec5eb89af72bad6055c2a46b5d560_1440w.webp" alt="v2-c6bec5eb89af72bad6055c2a46b5d560_1440w.webp"><br>失败情况<br><img src="/img/v2-4a56b58dde5beb2e569cefe9d0cbf652_1440w.webp" alt="v2-4a56b58dde5beb2e569cefe9d0cbf652_1440w.webp"></p><h2 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CanCommit 准备阶段, PreCommit 预提交阶段, DoCommit 提交阶段</span><br><span class="line">降低了阻塞范围 无法保证数据一致性, 可以自动补偿 监控事务异常</span><br></pre></td></tr></table></figure><p>2PC和3PC不适合高并发高性能的场景,延迟比较高,但提供强一致性和强事务</p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Try-Confirm-Cancel 应用层的两阶段提交 代码入侵性强 最终一致性</span><br><span class="line">性能提高,最终一致性,可靠</span><br><span class="line">执行时间较短,实时性要求高,数据一致性要求高的场景,  如交易 支付 财务</span><br></pre></td></tr></table></figure><p>成功情况<br><img src="/img/v2-d5d7ed818d6067b3397e70db1e072a4a_1440w.webp" alt="v2-d5d7ed818d6067b3397e70db1e072a4a_1440w.webp"></p><p>失败情况<br><img src="/img/v2-6dc4b22fc1285a41804f55a364fc3187_1440w.webp" alt="v2-6dc4b22fc1285a41804f55a364fc3187_1440w.webp"></p><h2 id="Saga"><a href="#Saga" class="headerlink" title="Saga"></a>Saga</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相比TCC 等于直接提交,没有try </span><br><span class="line">补偿动作容易处理的场景</span><br></pre></td></tr></table></figure><h2 id="本地事务表"><a href="#本地事务表" class="headerlink" title="本地事务表"></a>本地事务表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">事务主动方--&gt;消息中间件--&gt;事务被动方</span><br><span class="line">适用于可异步执行的业务，且后续操作无需回滚的业务</span><br></pre></td></tr></table></figure><h2 id="MQ事务消息"><a href="#MQ事务消息" class="headerlink" title="MQ事务消息"></a>MQ事务消息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">封装本地事务</span><br></pre></td></tr></table></figure><p>对一致性要求不高,有人工检查,对账</p><h2 id="最大努力通知"><a href="#最大努力通知" class="headerlink" title="最大努力通知"></a>最大努力通知</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 发起通知方通过一定的机制最大努力将业务处理结果通知到接收方。</span><br><span class="line">- 有一定的消息重复通知机制。</span><br><span class="line">- 消息校对机制。</span><br><span class="line">- 提供接口，让接受通知放能够通过接口查询业务处理结果</span><br><span class="line">- 消息队列ACK机制，消息队列按照间隔1min、5min、10min、30min、1h、2h、5h、10h的方式，逐步拉大通知间隔 ，直到达到通知要求的时间窗口上限。之后不再通知</span><br><span class="line">- 最大努力通知适用于业务通知类型，例如微信交易的结果，就是通过最大努力通知方式通知各个商户，既有回调通知，也有交易查询接口</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁分类</title>
      <link href="/2025/02/11/%E9%94%81%E5%88%86%E7%B1%BB/"/>
      <url>/2025/02/11/%E9%94%81%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/Java%E4%B8%AD%E9%94%81%E5%88%86%E7%B1%BB.jpg" alt="Java中锁分类.jpg"></p><h1 id="基于锁的获取与释放方式分类"><a href="#基于锁的获取与释放方式分类" class="headerlink" title="基于锁的获取与释放方式分类"></a>基于锁的获取与释放方式分类</h1><h2 id="隐式锁-内置锁或自动锁"><a href="#隐式锁-内置锁或自动锁" class="headerlink" title="隐式锁(内置锁或自动锁)"></a>隐式锁(内置锁或自动锁)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过synchronized关键字实现的一种线程同步机制,当一个线程进入被synchronized修饰的方法或代码块时，它会自动获得对象级别的锁，退出该方法或代码块时则会自动释放这把锁。</span><br></pre></td></tr></table></figure><h3 id="隐式锁的实现机制主要包括以下两种类型"><a href="#隐式锁的实现机制主要包括以下两种类型" class="headerlink" title="隐式锁的实现机制主要包括以下两种类型"></a>隐式锁的实现机制主要包括以下两种类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.互斥锁 </span><br><span class="line">  java虚拟机对synchronized 关键字处理的底层实现中,当锁竞争激烈且必须升级重量级锁时,会利用操作系统互斥量机制确保在同一时刻仅允许一个线程持有锁,从而实现严格的线程互斥控制</span><br><span class="line">2.内部锁或监视器锁</span><br><span class="line">  通过使用synchronized关键字便捷地管理和操作相应对象的监视器锁并在执行完毕后自动释放，这一过程对用户透明，故被称为隐式锁。每个Java对象均与一个监视器锁关联，以此来协调对该对象状态访问的并发控制</span><br></pre></td></tr></table></figure><h3 id="隐式锁适用场景"><a href="#隐式锁适用场景" class="headerlink" title="隐式锁适用场景"></a>隐式锁适用场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 简洁易用,确保了线程安全,避免了竞态条件,异常处理下自动释放.</span><br><span class="line">- 锁定颗粒通常是对象级别,相对显示锁不灵活,高并发下可能引起锁争用,导致性能下级.</span><br><span class="line">- 适用于相对简单的多线程同步需求，尤其是在只需要保护某个对象状态完整性，且无需过多关注锁策略灵活性的场合。对于要求更高并发性和更复杂锁管理逻辑的应用场景，显示锁通常是一个更好的选择。</span><br></pre></td></tr></table></figure><h2 id="显式锁"><a href="#显式锁" class="headerlink" title="显式锁"></a>显式锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 显式锁是由java.util.concurrent.locks.Lock接口及其诸多实现类提供的同步机制</span><br><span class="line">2. 显式锁赋予开发者更为精细和灵活的控制能力，使其能够在多线程环境中精准掌控同步动作。</span><br><span class="line">3. 显式锁的核心作用在于确保在任何时刻仅有一个线程能够访问关键代码段或共享数据，从而有效防止数据不一致性问题和竞态条件</span><br></pre></td></tr></table></figure><h3 id="常见的显式锁"><a href="#常见的显式锁" class="headerlink" title="常见的显式锁"></a>常见的显式锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. ReentrantLock：可重入锁，继承自Lock接口，支持可中断锁、公平锁和非公平锁的选择。可重入意味着同一个线程可以多次获取同一线程持有的锁。</span><br><span class="line">2. ReentrantReadWriteLock：读写锁，提供了两个锁，一个是读锁，允许多个线程同时读取；另一个是写锁，同一时间内只允许一个线程写入，写锁会排斥所有读锁和写锁。</span><br><span class="line">3. StampedLock：带版本戳的锁，提供了乐观读、悲观读写模式，适合于读多写少的场景，可以提升系统性能。</span><br></pre></td></tr></table></figure><h3 id="显式锁适用场景"><a href="#显式锁适用场景" class="headerlink" title="显式锁适用场景"></a>显式锁适用场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 显式锁提供了多种获取和释放锁的方式 如中断等待锁的线程，设置超时获取锁等,在某些特定场景下，显式锁可以提供比隐式锁更好的性能表现，尤其是当需要避免死锁或优化读多写少的情况时。显式锁允许创建公平锁，按照线程请求锁的顺序给予响应，保证所有线程在等待锁时有一定的公平性。</span><br><span class="line">- 使用复杂,需要手动调用lock()和unlock(),额外API调用和锁状态管理可能带来额外的性能开销,操作更加细致，因此更容易出错</span><br><span class="line">- 显式锁适用于复杂的事务控制和并发访问场景，例如需要精确控制锁的粒度和范围，或者需要实现特定的并发控制策略。</span><br></pre></td></tr></table></figure><h1 id="基于对资源的访问权限"><a href="#基于对资源的访问权限" class="headerlink" title="基于对资源的访问权限"></a>基于对资源的访问权限</h1><h2 id="独占锁-Exclusive-Lock-排他锁-写锁"><a href="#独占锁-Exclusive-Lock-排他锁-写锁" class="headerlink" title="独占锁(Exclusive Lock) |排他锁|写锁"></a>独占锁(Exclusive Lock) |排他锁|写锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 独占锁主要用于保护那些在并发环境下会被多个线程修改的共享资源，确保在修改期间不会有其他线程干扰，从而维护数据的一致性和完整性。</span><br><span class="line">- 独占锁的实现方式，主要有如下两种：</span><br><span class="line">    1.synchronized关键字：通过synchronized关键字实现的隐式锁，它是独占锁的一种常见形式，任何时刻只有一个线程可以进入被synchronized修饰的方法或代码块。</span><br><span class="line">    2.ReentrantLock：可重入的独占锁，提供了更多的控制方式，包括可中断锁、公平锁和非公平锁等。</span><br><span class="line">- 优点: 简单易用,线程安全,可重入性</span><br><span class="line">- 缺点: 粒度固定,缺乏灵活性,性能瓶颈</span><br></pre></td></tr></table></figure><h2 id="共享锁（Shared-Lock）-读锁（Read-Lock"><a href="#共享锁（Shared-Lock）-读锁（Read-Lock" class="headerlink" title="共享锁（Shared Lock）| 读锁（Read Lock)"></a>共享锁（Shared Lock）| 读锁（Read Lock)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 允许多个线程同时读取共享资源，但不允许任何线程修改资源。在数据库系统和并发编程中广泛使用，确保在并发读取场景下数据的一致性</span><br><span class="line">- 实现共享锁的关键机制是读写锁（ReadWriteLock）</span><br><span class="line">   ReentrantReadWriteLock lock=new ReentrantReadWriteLock();</span><br><span class="line">   ReentrantReadWriteLock.ReadLock readLock=lock.readLock();</span><br><span class="line">   ReentrantReadWriteLock.WriteLock writeLock= lock.writeLock();</span><br><span class="line">- 优点:提高并发性,数据保护</span><br><span class="line">- 缺点:写操作阻塞,可能导致死锁,数据一致性问题</span><br></pre></td></tr></table></figure><h1 id="基于锁的占有权是否可重入"><a href="#基于锁的占有权是否可重入" class="headerlink" title="基于锁的占有权是否可重入"></a>基于锁的占有权是否可重入</h1><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当线程已经获取了锁后，它可以再次请求并成功获得同一把锁，从而避免了在递归调用或嵌套同步块中产生的死锁风险</span><br></pre></td></tr></table></figure><h3 id="可重入锁主要可以通过以下三种方式实现："><a href="#可重入锁主要可以通过以下三种方式实现：" class="headerlink" title="可重入锁主要可以通过以下三种方式实现："></a>可重入锁主要可以通过以下三种方式实现：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.synchronized关键字：synchronized关键字实现的隐式锁就是一种可重入锁。</span><br><span class="line">2.ReentrantLock：java.util.concurrent.locks.ReentrantLock类实现了Lock接口，提供了显式的可重入锁功能，它允许更细粒度的控制，例如支持公平锁、非公平锁，以及可中断锁、限时锁等。</span><br><span class="line">3.ReentrantReadWriteLock：ReentrantReadWriteLock 是一种特殊的可重入锁，它通过读写锁的设计，既实现了可重入特性的线程安全，又能高效地处理读多写少的并发场景。</span><br></pre></td></tr></table></figure><h2 id="不可重入锁"><a href="#不可重入锁" class="headerlink" title="不可重入锁"></a>不可重入锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">核心特征在于禁止同一个线程在已经持有锁的前提下再度获取相同的锁。若一个线程已取得不可重入锁，在其执行路径中遇到需要再次获取该锁的场景时，该线程将会被迫等待，直至原先获取的锁被释放，其他线程才有可能获取并执行相关临界区代码。</span><br></pre></td></tr></table></figure><h1 id="基于锁的获取公平性"><a href="#基于锁的获取公平性" class="headerlink" title="基于锁的获取公平性"></a>基于锁的获取公平性</h1><h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 公平锁是一种线程调度策略，在多线程环境下，当多个线程尝试获取锁时，锁的分配遵循“先请求先服务”（First-Come, First-Served, FCFS）原则，即按照线程请求锁的顺序来分配锁资源。</span><br><span class="line">- 公平锁的实现，可以通过java.util.concurrent.locks.ReentrantLock的构造函数传入true参数，可以创建一个公平的ReentrantLock实例。</span><br><span class="line">    ReentrantLock fairLock = new ReentrantLock(true); //创建一个公平锁</span><br></pre></td></tr></table></figure><h2 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">非公平锁是一种线程调度策略，在多线程环境下，当多个线程尝试获取锁时，锁的分配不遵循“先请求先服务”（First-Come, First-Served, FCFS）原则，而是允许任何等待锁的线程在锁被释放时尝试获取，即使其他线程已经在等待队列中等待更长时间。非公平锁在某些场景下可以提高系统的并发性能，因为它允许刚释放锁的线程或者其他新到达的线程立刻获取锁，而不是强制排队等待。</span><br></pre></td></tr></table></figure><h1 id="基于对共享资源的访问方式"><a href="#基于对共享资源的访问方式" class="headerlink" title="基于对共享资源的访问方式"></a>基于对共享资源的访问方式</h1><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 悲观锁（Pessimistic Lock）是一种并发控制策略，它假设在并发环境下，多个线程对共享资源的访问极有可能发生冲突，因此在访问资源之前，先尝试获取并锁定资源，直到该线程完成对资源的访问并释放锁，其他线程才能继续访问。</span><br><span class="line">- 悲观锁的主要作用是在多线程环境中防止数据被并发修改，确保数据的一致性和完整性</span><br><span class="line">- 当一个线程获取了悲观锁后，其他线程必须等到锁释放后才能访问相应资源，从而避免了数据竞态条件和脏读等问题。</span><br><span class="line">- 悲观锁适合写操作较多且读操作较少的并发场景。</span><br><span class="line">- 频繁的加锁和解锁操作可能带来较大的性能消耗，尤其是在高并发场景下，可能导致线程频繁上下文切换。可能导致死锁,在读多写少的场景下，悲观锁可能导致大量的读取操作等待，降低系统的并发能力和响应速度。</span><br></pre></td></tr></table></figure><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 一种并发控制策略，它基于乐观假设：即在并发访问环境下，认为数据竞争不太可能发生，所以在读取数据时并不会立即加锁。乐观锁适用于读多写少的场景或者并发较少的场景。</span><br><span class="line">- 乐观锁通过CAS（Compare and Swap / Compare and Set）算法实现，而数据库层面我们常使用版本号或者时间戳等进行控制。</span><br><span class="line">- Java提供了java.util.concurrent.atomic包中的原子类，如AtomicInteger、AtomicLong等，它们通过CAS操作来实现乐观锁。CAS操作是一个原子指令，它只会修改数据，当且仅当该数据的当前值等于预期值时才进行修改。</span><br><span class="line">- 优点:更高的并发性能,降低死锁可能性</span><br><span class="line">- 缺点:冲突处理成本,循环依赖问题(ABA)</span><br></pre></td></tr></table></figure><h1 id="基于锁的升级以及优化"><a href="#基于锁的升级以及优化" class="headerlink" title="基于锁的升级以及优化"></a>基于锁的升级以及优化</h1><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 偏向锁是Java内存模型中锁的三种状态之一，位于轻量级锁和重量级锁之前。</span><br><span class="line">- 适用于大多数时间只有一个线程访问同步代码块的场景。</span><br><span class="line">- 当一个线程访问同步代码块时，JVM会把锁偏向于这个线程，后续该线程在进入和退出同步代码块时，无需再做任何同步操作，从而大大降低了获取锁和释放锁的开销。</span><br></pre></td></tr></table></figure><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 轻量级锁的作用主要是减少线程上下文切换的开销，通过自旋（spin-wait）的方式让线程在一段时间内等待锁的释放，而不是立即挂起线程，这样在锁竞争不是很激烈的情况下，能够快速获得锁，提高程序的响应速度和并发性能。</span><br><span class="line">- 轻量级锁主要作为JVM锁状态的一种，它介于偏向锁和重量级锁之间。当JVM发现偏向锁不再适用（即锁的竞争不再局限于单个线程）时，会将锁升级为轻量级锁。</span><br></pre></td></tr></table></figure><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 重量级锁是指在多线程编程中，为了保护共享资源而采取的一种较为传统的互斥同步机制，通常涉及到操作系统的互斥量（Mutex）或者监视器锁（Monitor）</span><br><span class="line">- 通过synchronized关键字实现的锁机制在默认情况下就是重量级锁</span><br><span class="line">- 重量级锁适用于：</span><br><span class="line">    1.高并发且锁竞争激烈的场景，因为在这种情况下，保证数据的正确性远比微小的性能损失重要。</span><br><span class="line">    2.对于需要长时间持有锁的操作，因为短暂的上下文切换成本相对于长时间的操作来说是可以接受的。</span><br><span class="line">    3.当同步代码块中涉及到IO操作、数据库访问等耗时较长的任务时，重量级锁能够较好地防止其它线程饿死。</span><br></pre></td></tr></table></figure><h3 id="偏向锁、轻量级锁和重量级锁之间的转换条件"><a href="#偏向锁、轻量级锁和重量级锁之间的转换条件" class="headerlink" title="偏向锁、轻量级锁和重量级锁之间的转换条件"></a>偏向锁、轻量级锁和重量级锁之间的转换条件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.偏向锁到轻量级锁的转换：</span><br><span class="line">   当有第二个线程尝试获取已经被偏向的锁时，偏向锁就会失效并升级为轻量级锁。这是因为偏向锁假定的是只有一个线程反复获取锁，如果有新的线程参与竞争，就需要进行锁的升级以保证线程间的互斥。</span><br><span class="line">2.轻量级锁到重量级锁的转换：</span><br><span class="line">  当轻量级锁尝试获取失败（CAS操作失败），即出现了锁竞争时，JVM会认为当前锁的持有者无法很快释放锁，因此为了避免后续线程无休止地自旋等待，会将轻量级锁升级为重量级锁。这个转换过程通常发生在自旋尝试获取锁达到一定次数（自旋次数是可配置的）或者系统处于高负载状态时。</span><br><span class="line">3.偏向锁到重量级锁的转换：</span><br><span class="line">  如果当前线程不是偏向锁指向的线程，那么首先会撤销偏向锁（解除偏向状态），然后升级为轻量级锁，之后再根据轻量级锁的规则判断是否需要进一步升级为重量级锁。</span><br></pre></td></tr></table></figure><h2 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 分段锁（Segmented Lock 或 Partitions Lock）是一种将数据或资源划分为多个段（segments），并对每个段分配单独锁的锁机制。</span><br><span class="line">- Java中，分段锁在实现上可以基于哈希表的分段锁，例如Java中的ConcurrentHashMap，将整个哈希表分割为多个段（Segment），每个段有自己的锁，这样多个线程可以同时对不同段进行操作。</span><br><span class="line">- 分段锁适用于大数据结构的并发访问，如高并发环境下对哈希表的操作。以及分布式系统中，某些分布式缓存或数据库系统也采用类似的分片锁策略来提高并发性能。</span><br></pre></td></tr></table></figure><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 自旋锁（Spin Lock）是一种简单的锁机制</span><br><span class="line">- 自旋锁在持有锁的线程很快释放锁的情况下，可以减少线程的上下文切换开销。</span><br><span class="line">- 工作原理是当一个线程试图获取已经被另一个线程持有的锁时，该线程不会立即进入睡眠状态（阻塞），而是不断地循环检查锁是否已经被释放，直到获取到锁为止。这种“循环等待”的行为被称为“自旋”。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简明概要</title>
      <link href="/2025/02/11/Docker%E7%AE%80%E6%98%8E%E6%A6%82%E8%A6%81/"/>
      <url>/2025/02/11/Docker%E7%AE%80%E6%98%8E%E6%A6%82%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h1><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="1-docker-images-查看镜像"><a href="#1-docker-images-查看镜像" class="headerlink" title="1. docker images 查看镜像"></a>1. docker images 查看镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(docker images -a) -a, --all # 显示所有镜像 </span><br><span class="line">(docker images -q) -q, --quiet # 仅显示镜像id </span><br></pre></td></tr></table></figure><h3 id="2-docker-serach-搜索镜像"><a href="#2-docker-serach-搜索镜像" class="headerlink" title="2. docker serach 搜索镜像"></a>2. docker serach 搜索镜像</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql --filter=STARS=5000 搜索stars大于5000的</span><br></pre></td></tr></table></figure><h3 id="3-docker-pull-镜像-tag"><a href="#3-docker-pull-镜像-tag" class="headerlink" title="3. docker pull 镜像[:tag]"></a>3. docker pull 镜像[:tag]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果不写tag，默认就是latest，最新的版本</span><br></pre></td></tr></table></figure><h3 id="4-docker-rmi-镜像id"><a href="#4-docker-rmi-镜像id" class="headerlink" title="4. docker rmi 镜像id"></a>4. docker rmi 镜像id</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像id</span><br><span class="line">docker rmi -f 镜像id 镜像id</span><br><span class="line">docker rmi -f $(docker images -aq)删除全部镜像</span><br></pre></td></tr></table></figure><h3 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker run -d -p 80:80 nginx  -d 后台 -p 端口映射</span><br><span class="line">docker run -it centos /bin/bash 运行并进入容器内部 </span><br><span class="line">docker exec -it nginx /bin/bash  进入当前正在运行的容器</span><br><span class="line">docker attach 容器Id</span><br><span class="line"># docker exec        # 进入容器后开启一个新的终端，可以再里面操作（常用）</span><br><span class="line"># docker attach      # 进入容器正在执行的终端，不会启动新的进程。</span><br></pre></td></tr></table></figure><h3 id="列出所有运行的容器"><a href="#列出所有运行的容器" class="headerlink" title="列出所有运行的容器"></a>列出所有运行的容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [-a]</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器Id </span><br></pre></td></tr></table></figure><h3 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id        # 启动容器</span><br><span class="line">docker restart 容器id    # 重启容器</span><br><span class="line">docker stop 容器id        # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id        # 强制停止当前容器</span><br></pre></td></tr></table></figure><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><h3 id="容器日志查看"><a href="#容器日志查看" class="headerlink" title="容器日志查看"></a>容器日志查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf -n 容器id</span><br></pre></td></tr></table></figure><h3 id="查看容器中进程的信息"><a href="#查看容器中进程的信息" class="headerlink" title="查看容器中进程的信息"></a>查看容器中进程的信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure><h3 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><h3 id="从容器内拷贝文件到宿主机"><a href="#从容器内拷贝文件到宿主机" class="headerlink" title="从容器内拷贝文件到宿主机"></a>从容器内拷贝文件到宿主机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机的路径</span><br></pre></td></tr></table></figure><h2 id="数据卷的管理"><a href="#数据卷的管理" class="headerlink" title="数据卷的管理"></a>数据卷的管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 -v /data:/usr/share/nginx/html nginx # 创建卷</span><br><span class="line">容器目录:/usr/share/nginx/html</span><br><span class="line">主机目录:/data</span><br><span class="line"></span><br><span class="line">docker volume ls  # 查看卷</span><br><span class="line">docker volume inspect 卷名 查看卷路径</span><br><span class="line">所有的docker容器内的卷，没有指定目录的情况下都是在&quot;/var/lib/docker/volumes/xxxx/_data&quot;（xxxx是卷名）</span><br><span class="line"># 如何确定是具名挂载，还是匿名挂载，还是指定路径挂载</span><br><span class="line">-v 容器内的路径                # 匿名挂载</span><br><span class="line">-v 卷名:容器内的路径        # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径    # 指定路径挂载</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="dockerfile常用指令："><a href="#dockerfile常用指令：" class="headerlink" title="dockerfile常用指令："></a>dockerfile常用指令：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM 这个镜像的妈妈是谁？（指定基础镜像）</span><br><span class="line"></span><br><span class="line">MAINTAINER 告诉别人，谁负责养它？（指定维护者信息，可以没有）</span><br><span class="line"></span><br><span class="line">RUN 你想让它干啥（在命令前面加上RUN即可）</span><br><span class="line"></span><br><span class="line">ADD 给它点创业资金（COPY文件，会自动解压）</span><br><span class="line"></span><br><span class="line">WORKDIR 我是cd,今天刚化了妆（设置当前工作目录）</span><br><span class="line"></span><br><span class="line">VOLUME 给它一个存放行李的地方（设置卷，挂载主机目录）</span><br><span class="line"></span><br><span class="line">EXPOSE 它要打开的门是啥（指定对外的端口）</span><br><span class="line"></span><br><span class="line">CMD 奔跑吧，兄弟！（指定容器启动后的要干的事情,只有最后一个会生效，可被替代）</span><br><span class="line">ENTRYPOINT    指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD       当构建一个被继承DockerFile这个时候就会运行ONBUILD的指令。触发指令。</span><br><span class="line">COPY          类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV           构建的时候设置环境变量！</span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image build -t 镜像 .</span><br><span class="line">-t 打标签,.表示当前路径.执行必须在Dockerfile目录下执行</span><br></pre></td></tr></table></figure><h2 id="Docker-网路"><a href="#Docker-网路" class="headerlink" title="Docker 网路"></a>Docker 网路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run  -it --network none busybox:latest  /bin/sh</span><br><span class="line">    --不为容器配置任何网络功能，没有网络 --net=none</span><br><span class="line">docker run  -it --network container:containerID  busybox:latest  /bin/sh</span><br><span class="line">    --与另一个运行中的容器共享Network Namespace，--net=container:containerID</span><br><span class="line">docker run  -it --network host  busybox:latest  /bin/sh</span><br><span class="line">    --与主机共享Network Namespace，--net=host</span><br><span class="line">--自定义网络</span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">--查看网络</span><br><span class="line">docker network ls</span><br><span class="line">--查看网络容器信息</span><br><span class="line">docker network inspect mynet</span><br><span class="line">--连接打通网络</span><br><span class="line">docker network connect mynet tomcat01</span><br><span class="line"># 连通之后就是将tomcat01放到了mynet网络下</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>一个典型的 Docker Compose 配置文件具有以下基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.9&#x27;</span><br><span class="line">services:</span><br><span class="line">  service1:</span><br><span class="line">    image: image1:tag</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:80&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">    environment:</span><br><span class="line">      - ENV_VAR=value</span><br><span class="line"></span><br><span class="line">  service2:</span><br><span class="line">    image: image2:tag</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8081:80&quot;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>详细参数说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- version：指定 Docker Compose 配置文件的语法版本。</span><br><span class="line">- services：定义的容器服务列表。</span><br><span class="line">- serviceX：服务名称，可以根据需求自定义。</span><br><span class="line">- image：容器镜像名称和标签。</span><br><span class="line">- ports：端口映射配置。</span><br><span class="line">- volumes：挂载卷配置。</span><br><span class="line">- environment：环境变量设置。</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose-常用命令"><a href="#Docker-Compose-常用命令" class="headerlink" title="Docker Compose 常用命令"></a>Docker Compose 常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- docker-compose up：构建（如果不存在）并启动所有容器。</span><br><span class="line">- docker-compose down：停止并移除所有容器、网络和卷。</span><br><span class="line">- docker-compose start：启动已构建的容器。</span><br><span class="line">- docker-compose stop：停止已启动的容器。</span><br><span class="line">- docker-compose restart：重启已启动的容器。</span><br></pre></td></tr></table></figure><h2 id="Docker-容器时区"><a href="#Docker-容器时区" class="headerlink" title="Docker 容器时区"></a>Docker 容器时区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker容器采用了UTC时间，默认为零时区，而我们主要用的是CST时间，北京时间，位于东八区。时区代号：Asia/Shanghai，这导致两者相差8小时</span><br></pre></td></tr></table></figure><h3 id="进入容器执行命令"><a href="#进入容器执行命令" class="headerlink" title="进入容器执行命令"></a>进入容器执行命令</h3><p>1.方法一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>2.方法二（在有timedatectl命令的情况下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch入门记录</title>
      <link href="/2025/02/11/elasticsearch%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/02/11/elasticsearch%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker-安装elasticsearch"><a href="#1-Docker-安装elasticsearch" class="headerlink" title="1.Docker 安装elasticsearch"></a>1.Docker 安装elasticsearch</h1><h2 id="1-1-创建网络"><a href="#1-1-创建网络" class="headerlink" title="1.1.创建网络"></a>1.1.创建网络</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create elastic</span><br></pre></td></tr></table></figure><h2 id="1-2-创建elasticsearch"><a href="#1-2-创建elasticsearch" class="headerlink" title="1.2.创建elasticsearch"></a>1.2.创建elasticsearch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">--network elastic \</span><br><span class="line">-p 9388:9200 \</span><br><span class="line">-p 9389:9300 \</span><br><span class="line">--privileged \</span><br><span class="line">-v /opt/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /opt/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /opt/elasticsearch/config:/usr/share/Elasticsearch/config \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e &quot;ES_JAVA_OPTS=-Xms256m -Xmx512m&quot; \</span><br><span class="line">-e &quot;xpack.security.enabled=false&quot; \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:8.15.2</span><br></pre></td></tr></table></figure><h2 id="1-3-创建kibana"><a href="#1-3-创建kibana" class="headerlink" title="1.3.创建kibana"></a>1.3.创建kibana</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--name kibana \</span><br><span class="line">--network elastic \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">--privileged \</span><br><span class="line">-v /opt/kibana/data:/usr/share/kibana/data \</span><br><span class="line">-v /opt/kibana/config:/usr/share/kibana/config \</span><br><span class="line">-v /opt/kibana/plugins:/usr/share/kibana/plugins \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://elasticsearch:9200 \</span><br><span class="line">-e &quot;xpack.security.enabled=false&quot; \</span><br><span class="line">docker.elastic.co/kibana/kibana:8.15.2</span><br></pre></td></tr></table></figure><h2 id="1-4-安装分词器"><a href="#1-4-安装分词器" class="headerlink" title="1.4.安装分词器"></a>1.4.安装分词器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line">bin/elasticsearch-plugin install https://get.infini.cloud/elasticsearch/analysis-ik/8.15.2</span><br></pre></td></tr></table></figure><h3 id="1-4-1-IK分词器有几种模式？"><a href="#1-4-1-IK分词器有几种模式？" class="headerlink" title="1.4.1 IK分词器有几种模式？"></a>1.4.1 IK分词器有几种模式？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-   ik_smart：智能切分，粗粒度</span><br><span class="line">-   ik_max_word：最细切分，细粒度</span><br></pre></td></tr></table></figure><h3 id="1-4-2-IKAnalyzer-cfg-xml配置文件-注意当前文件的编码必须是-UTF-8-格式"><a href="#1-4-2-IKAnalyzer-cfg-xml配置文件-注意当前文件的编码必须是-UTF-8-格式" class="headerlink" title="1.4.2 IKAnalyzer.cfg.xml配置文件(注意当前文件的编码必须是 UTF-8 格式)"></a>1.4.2 IKAnalyzer.cfg.xml配置文件(注意当前文件的编码必须是 UTF-8 格式)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-mysql与elasticsearch的概念做一下对比："><a href="#2-mysql与elasticsearch的概念做一下对比：" class="headerlink" title="2. mysql与elasticsearch的概念做一下对比："></a>2. mysql与elasticsearch的概念做一下对比：</h1><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><h1 id="3-es索引的基本操作"><a href="#3-es索引的基本操作" class="headerlink" title="3.es索引的基本操作"></a>3.es索引的基本操作</h1><h2 id="3-1-创建索引"><a href="#3-1-创建索引" class="headerlink" title="3.1 创建索引"></a>3.1 创建索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /index_name</span><br><span class="line">&#123;</span><br><span class="line">   # 别名</span><br><span class="line">   &quot;aliases&quot;: &#123;</span><br><span class="line">        &quot;index_alias&quot;: &#123;&#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    # 索引设置</span><br><span class="line">&quot;settings&quot;:&#123;</span><br><span class="line">&quot;number_of_shards&quot;:1,</span><br><span class="line">&quot;number_of_replicas&quot;:1,</span><br><span class="line">&quot;analysis&quot;:&#123;</span><br><span class="line">&quot;analyzer&quot;:&#123;&#125;,</span><br><span class="line">&quot;filter&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"># mappings 字段映射</span><br><span class="line">&quot;mappings&quot;:&#123;</span><br><span class="line">&quot;properties&quot;:&#123;</span><br><span class="line">&quot;name&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;text&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-Mappings-映射"><a href="#3-1-1-Mappings-映射" class="headerlink" title="3.1.1 Mappings 映射"></a>3.1.1 Mappings 映射</h3><ul><li><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li><p>type：字段数据类型，常见的简单类型有：</p><ul><li><p>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</p><blockquote><p><strong>keyword类型只能整体搜索，不支持搜索部分内容</strong></p></blockquote></li><li><p>数值：long、integer、short、byte、double、float、</p></li><li><p>布尔：boolean</p></li><li><p>日期：date</p></li><li><p>对象：object</p></li></ul></li><li><p>index：是否创建索引，默认为true</p></li><li><p>analyzer：使用哪种分词器</p></li><li><p>properties：该字段的子字段</p></li></ul></li></ul><h2 id="3-2-删除索引"><a href="#3-2-删除索引" class="headerlink" title="3.2 删除索引"></a>3.2 删除索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /index_name</span><br></pre></td></tr></table></figure><h2 id="3-3-查询索引"><a href="#3-3-查询索引" class="headerlink" title="3.3 查询索引"></a>3.3 查询索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /index_name</span><br></pre></td></tr></table></figure><h2 id="3-4-修改索引"><a href="#3-4-修改索引" class="headerlink" title="3.4 修改索引"></a>3.4 修改索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT  /index_name/_setting  # 修改分片</span><br><span class="line">PUT  /index_name/_mapping  # 修改字段类型</span><br></pre></td></tr></table></figure><h1 id="4-es文档的基本操作"><a href="#4-es文档的基本操作" class="headerlink" title="4.es文档的基本操作"></a>4.es文档的基本操作</h1><h2 id="4-1-创建文档"><a href="#4-1-创建文档" class="headerlink" title="4.1 创建文档"></a>4.1 创建文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- 创建文档 PUT带id POST带id</span><br><span class="line">    PUT /index_name/_doc/id  # 幂等性</span><br><span class="line">    POST /index_name/_doc/id</span><br><span class="line">    &#123;</span><br><span class="line">       &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">       &quot;age&quot;:18,</span><br><span class="line">       &quot;sex&quot;:1</span><br><span class="line">    &#125;</span><br><span class="line">- POST 创建 不带id </span><br><span class="line">    POST /index_name/_doc  # 非幂等性  </span><br><span class="line">    &#123;</span><br><span class="line">       &quot;name&quot;:&quot;李四&quot;,</span><br><span class="line">       &quot;age&quot;:28,</span><br><span class="line">       &quot;sex&quot;:0</span><br><span class="line">    &#125;</span><br><span class="line">-  bulk  批量创建</span><br><span class="line">    POST _bulk</span><br><span class="line">    &#123; &quot;create&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">    &#123;&quot;id&quot;:&quot;2&quot;,&quot;title&quot;:&quot;未命名&quot;,&quot;content&quot;:&quot;blog内容&quot;,&quot;tags&quot;:[&quot;java&quot;,&quot;python&quot;]&#125;</span><br><span class="line">    &#123; &quot;create&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">    &#123;&quot;id&quot;:&quot;3&quot;,&quot;content&quot;:&quot;blog内容&quot;,&quot;tags&quot;:[&quot;Go&quot;,&quot;C#&quot;]&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-删除文档"><a href="#4-2-删除文档" class="headerlink" title="4.2 删除文档"></a>4.2 删除文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- 删除 by id</span><br><span class="line">DELETE /index_name/_doc/id</span><br><span class="line">- 批量删除</span><br><span class="line">POST _bulk </span><br><span class="line">&#123;</span><br><span class="line">&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">- 批量查询删除</span><br><span class="line">POST /index_name/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;match&quot;:&#123;</span><br><span class="line">&quot;&lt;field_name&gt;&quot;:&quot;query_string&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-查询文档"><a href="#4-3-查询文档" class="headerlink" title="4.3 查询文档"></a>4.3 查询文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- 查询</span><br><span class="line">GET /index_name/_search</span><br><span class="line">&#123;</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;match_all&quot;:&#123;&#125;  # 匹配所有</span><br><span class="line">&quot;match&quot;:&#123;  # 匹配文本字段</span><br><span class="line">&quot;&lt;field_name&gt;&quot;:&quot;&lt;query_string&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&quot;term&quot;:&#123;   # 精确查询</span><br><span class="line">&quot;&lt;field_name&gt;&quot;:&#123;</span><br><span class="line">&quot;value&quot;:&quot;&lt;exact_value&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&quot;range&quot;:&#123; #  范围查找</span><br><span class="line">&quot;&lt;field_name&gt;&quot;:&#123;</span><br><span class="line">&quot;gte&quot;:&lt;lower_bound&gt;,</span><br><span class="line">&quot;lte&quot;:&lt;upper_bound&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">- 查询 by id</span><br><span class="line">GET /index_name/_doc/id</span><br><span class="line">- 多个条件</span><br><span class="line">GET /index_name/_mget </span><br><span class="line">&#123;</span><br><span class="line">  &quot;ids&quot;:[&quot;1&quot;,&quot;2&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-4-修改文档"><a href="#4-4-修改文档" class="headerlink" title="4.4 修改文档"></a>4.4 修改文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- 单个修改 _seq_no=1&amp;_primary_term=1 乐观锁,高并发下更新</span><br><span class="line">POST  /index_name/_update/id?_seq_no=1&amp;_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">&quot;doc&quot;:&#123;</span><br><span class="line">&quot;&lt;field_name&gt;&quot;:&quot;&lt;value&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">- 批量修改</span><br><span class="line">POST _bulk</span><br><span class="line">&#123; &quot;update&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;,&#123;&quot;age&quot;:&quot;12&quot;&#125;&#125;</span><br><span class="line">- 查询修改</span><br><span class="line">POST /index_name/_update_by_query</span><br><span class="line">&#123;</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;term&quot;:&#123;</span><br><span class="line">&quot;field_name&quot;:&quot;value&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;script&quot;:&#123;</span><br><span class="line">&quot;source&quot;:&quot;ctx._source.field_name=ss&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MiniIO</title>
      <link href="/2025/02/11/MiniIO/"/>
      <url>/2025/02/11/MiniIO/</url>
      
        <content type="html"><![CDATA[<h1 id="MinIO-Docker安装使用和整合"><a href="#MinIO-Docker安装使用和整合" class="headerlink" title="MinIO Docker安装使用和整合"></a>MinIO Docker安装使用和整合</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">  -p 9000:9000 \</span></span><br><span class="line"><span class="language-bash">  -p 9001:9001 \</span></span><br><span class="line"><span class="language-bash">  --name minio \</span></span><br><span class="line"><span class="language-bash">  -d --restart=always \</span></span><br><span class="line"><span class="language-bash">  -e <span class="string">&quot;MINIO_ROOT_USER=minioadmin&quot;</span> \</span></span><br><span class="line"><span class="language-bash">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> \</span></span><br><span class="line"><span class="language-bash">  -e <span class="string">&quot;MINIO_BROWSER_DEFAULT_LOCALE=zh_CN&quot;</span> \    <span class="comment">#  这个好像没啥用</span></span></span><br><span class="line">  -v /opt/minio/data:/data \</span><br><span class="line">  -v /opt/minio/config:/root/.minio \</span><br><span class="line">  minio/minio  server \</span><br><span class="line"> /data --console-address <span class="string">&quot;:9001&quot;</span> -address <span class="string">&quot;:9000&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.minio&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;minio&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;8.5.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(url)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">jelly-minio</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">        <span class="attr">multipart:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">max-file-size:</span> <span class="string">100MB</span></span><br><span class="line">            <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">        <span class="attr">context-path:</span> <span class="string">/minio</span></span><br><span class="line"></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://192.168.83.128:9000</span></span><br><span class="line">    <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">minioadmin</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">blog</span></span><br></pre></td></tr></table></figure><h3 id="Util工具类"><a href="#Util工具类" class="headerlink" title="Util工具类"></a>Util工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.http.Method;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteObject;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient client;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//region   Operate Bucket</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">bucketExists</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BucketExistsArgs</span> <span class="variable">bucketArgs</span> <span class="operator">=</span> BucketExistsArgs</span><br><span class="line">                    .builder().bucket(bucketName).build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> client.bucketExists(bucketArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建桶命名规则</span></span><br><span class="line"><span class="comment">     * https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!bucketExists(bucketName)) &#123;</span><br><span class="line">                <span class="type">MakeBucketArgs</span> <span class="variable">args</span> <span class="operator">=</span> MakeBucketArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .build();</span><br><span class="line">                client.makeBucket(args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketExists(bucketName)) &#123;</span><br><span class="line">                <span class="type">RemoveBucketArgs</span> <span class="variable">args</span> <span class="operator">=</span> RemoveBucketArgs.builder().bucket(bucketName).build();</span><br><span class="line">                client.removeBucket(args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Bucket&gt; <span class="title function_">getBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.listBuckets().stream().filter(b -&gt; b.name().equals(bucketName)).findFirst();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Bucket&gt; <span class="title function_">listBuckets</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.listBuckets();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBucketPolicy</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.getBucketPolicy(</span><br><span class="line">                    GetBucketPolicyArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBucketPolicy</span><span class="params">(String bucketName, String config)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SetBucketPolicyArgs</span> <span class="variable">args</span> <span class="operator">=</span> SetBucketPolicyArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .config(config)</span><br><span class="line">                    .build();</span><br><span class="line">            client.setBucketPolicy(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//region  Operate Files</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isObjectExist</span><span class="params">(String bucketName, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StatObjectArgs</span> <span class="variable">args</span> <span class="operator">=</span> StatObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">return</span> client.statObject(args).size() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectWriteResponse <span class="title function_">createFolder</span><span class="params">(String bucketName, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.putObject(</span><br><span class="line">                    PutObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(objectName)</span><br><span class="line">                            .stream(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;), <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据前缀获取文件列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> recursive</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Item&gt; <span class="title function_">listObjectsByPrefix</span><span class="params">(String bucketName, String prefix, <span class="type">boolean</span> recursive)</span> &#123;</span><br><span class="line">        List&lt;Item&gt; itemList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ListObjectsArgs</span> <span class="variable">args</span> <span class="operator">=</span> ListObjectsArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .prefix(prefix)</span><br><span class="line">                    .recursive(recursive)</span><br><span class="line">                    .build();</span><br><span class="line">            Iterable&lt;Result&lt;Item&gt;&gt; items = client.listObjects(args);</span><br><span class="line">            <span class="keyword">if</span> (items != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Result&lt;Item&gt; result : items) &#123;</span><br><span class="line">                    <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> result.get();</span><br><span class="line">                    itemList.add(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> itemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getObject</span><span class="params">(String bucketName, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">GetObjectArgs</span> <span class="variable">args</span> <span class="operator">=</span> GetObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">return</span> client.getObject(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断点下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getObject</span><span class="params">(String bucketName, String objectName, <span class="type">long</span> offset, <span class="type">long</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">GetObjectArgs</span> <span class="variable">args</span> <span class="operator">=</span> GetObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .offset(offset)</span><br><span class="line">                    .length(length)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">return</span> client.getObject(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Result&lt;Item&gt;&gt; <span class="title function_">listObjects</span><span class="params">(String bucketName, String prefix, <span class="type">boolean</span> recursive)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ListObjectsArgs</span> <span class="variable">args</span> <span class="operator">=</span> ListObjectsArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .prefix(prefix)</span><br><span class="line">                    .recursive(recursive)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">return</span> client.listObjects(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectWriteResponse <span class="title function_">uploadFile</span><span class="params">(String bucketName, MultipartFile file, String objectName, String contentType)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.putObject(</span><br><span class="line">                    PutObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(objectName)</span><br><span class="line">                            .contentType(contentType)</span><br><span class="line">                            .stream(inputStream, inputStream.available(), -<span class="number">1</span>)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件并生成url</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(String bucketName, String fileName, String filePath)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UploadObjectArgs</span> <span class="variable">args</span> <span class="operator">=</span> UploadObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(fileName)</span><br><span class="line">                    .filename(filePath)</span><br><span class="line">                    .build();</span><br><span class="line">            client.uploadObject(args);</span><br><span class="line">            <span class="keyword">return</span> client.getPresignedObjectUrl(</span><br><span class="line">                    GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                            .method(Method.GET)</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(fileName)</span><br><span class="line">                            .expiry(<span class="number">2</span>, TimeUnit.HOURS)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageBase64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ObjectWriteResponse <span class="title function_">uploadImage</span><span class="params">(String bucketName, String imageBase64, String imageName)</span> &#123;</span><br><span class="line">        Assert.notNull(imageBase64, <span class="string">&quot;imageBase64 can not be null&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(imageBase64);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> + imageName + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> String.valueOf(<span class="keyword">new</span> <span class="title class_">Date</span>().getYear());</span><br><span class="line">        <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> String.valueOf(<span class="keyword">new</span> <span class="title class_">Date</span>().getMonth());</span><br><span class="line">        <span class="keyword">return</span> uploadFile(bucketName, year + <span class="string">&quot;/&quot;</span> + month + <span class="string">&quot;/&quot;</span> + newName, in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ObjectWriteResponse <span class="title function_">uploadFile</span><span class="params">(String bucketName, String objectName, String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.uploadObject(</span><br><span class="line">                    UploadObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(objectName)</span><br><span class="line">                            .filename(fileName)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectWriteResponse <span class="title function_">uploadFile</span><span class="params">(String bucketName, String objectName, InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.putObject(</span><br><span class="line">                    PutObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(objectName)</span><br><span class="line">                            .stream(inputStream, inputStream.available(), -<span class="number">1</span>)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeFile</span><span class="params">(String bucketName,String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RemoveObjectArgs</span> <span class="variable">args</span> <span class="operator">=</span> RemoveObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(fileName)</span><br><span class="line">                    .build();</span><br><span class="line">            client.removeObject(args);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//throw new RuntimeException(e);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeFiles</span><span class="params">(String bucketName, List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        List&lt;DeleteObject&gt; objects = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        keys.forEach(s -&gt; &#123;</span><br><span class="line">            objects.add(<span class="keyword">new</span> <span class="title class_">DeleteObject</span>(s));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                removeFile(bucketName, s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件状态信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileStatusInfo</span><span class="params">(String bucketName, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.statObject(</span><br><span class="line">                    StatObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(objectName)</span><br><span class="line">                            .build()).toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * copy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcBucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcObjectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ObjectWriteResponse <span class="title function_">copyFile</span><span class="params">(String bucketName, String objectName, String srcBucketName, String srcObjectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> client.copyObject(</span><br><span class="line">                    CopyObjectArgs.builder()</span><br><span class="line">                            .source(CopySource.builder().bucket(bucketName).object(objectName).build())</span><br><span class="line">                            .bucket(srcBucketName)</span><br><span class="line">                            .object(srcObjectName)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPresignedObjectUrl</span><span class="params">(String bucketName, String objectName, Integer expires)</span> &#123;</span><br><span class="line">        <span class="type">GetPresignedObjectUrlArgs</span> <span class="variable">args</span> <span class="operator">=</span> GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                .expiry(expires)</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .object(objectName).build();</span><br><span class="line">        <span class="keyword">return</span> client.getPresignedObjectUrl(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SneakyThrows(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPresignedObjectUrl</span><span class="params">(String bucketName, String objectName)</span> &#123;</span><br><span class="line">        <span class="type">GetPresignedObjectUrlArgs</span> <span class="variable">args</span> <span class="operator">=</span> GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .object(objectName)</span><br><span class="line">                .method(Method.GET).build();</span><br><span class="line">        <span class="keyword">return</span> client.getPresignedObjectUrl(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//endregion</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JellyMinioApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioUtil minioUtil;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span><span class="string">&quot;2024/X_4.jpg&quot;</span>;</span><br><span class="line">        String path=<span class="string">&quot;C:\\Users\\xiaohao\\Pictures\\4K壁纸\\X_4.jpg&quot;</span>;</span><br><span class="line">        String url= minioUtil.upload(<span class="string">&quot;blog&quot;</span>,filename, path);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">()</span> &#123;</span><br><span class="line">        minioUtil.createBucket(<span class="string">&quot;myblog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bucketExists</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> minioUtil.bucketExists(<span class="string">&quot;myblog&quot;</span>);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">()</span> &#123;</span><br><span class="line">        minioUtil.deleteBucket(<span class="string">&quot;myblog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getBucketPolicy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketPolicy</span> <span class="operator">=</span> minioUtil.getBucketPolicy(<span class="string">&quot;myblog&quot;</span>);</span><br><span class="line">        System.out.println(bucketPolicy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBucketPolicy</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ClassPathResource</span> <span class="variable">classPathResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;a3.json&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> classPathResource.getInputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(inputStream.readAllBytes());</span><br><span class="line">        minioUtil.setBucketPolicy(<span class="string">&quot;myblog&quot;</span>, config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listBuckets</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Bucket&gt; buckets = minioUtil.listBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Bucket bucket : buckets) &#123;</span><br><span class="line">            System.out.println(bucket.name());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getBuckets</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;Bucket&gt; bucket = minioUtil.getBucket(<span class="string">&quot;myblog&quot;</span>);</span><br><span class="line">        System.out.println(bucket.get().name());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">isObjectExist</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">objectExist</span> <span class="operator">=</span> minioUtil.isObjectExist(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;X_4.jpg&quot;</span>);</span><br><span class="line">        System.out.println(objectExist);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listObjectsByPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Item&gt; items = minioUtil.listObjectsByPrefix(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">            System.out.println(item.objectName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getFileStatusInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileStatusInfo</span> <span class="operator">=</span> minioUtil.getFileStatusInfo(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;X_4.jpg&quot;</span>);</span><br><span class="line">        System.out.println(fileStatusInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getPresignedObjectUrl</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">presignedObjectUrl</span> <span class="operator">=</span> minioUtil.getPresignedObjectUrl(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;X_4.jpg&quot;</span>);</span><br><span class="line">        System.out.println(presignedObjectUrl);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createFile</span><span class="params">()</span>&#123;</span><br><span class="line">        minioUtil.createFolder(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;/2024/1/1/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span><span class="string">&quot;/2024/1/1/X_7.png&quot;</span>;</span><br><span class="line">        String path=<span class="string">&quot;C:\\Users\\xiaohao\\Pictures\\4K壁纸\\X_7.png&quot;</span>;</span><br><span class="line">        String url= minioUtil.upload(<span class="string">&quot;blog&quot;</span>,filename, path);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MinIO-config-配置桶政策"><a href="#MinIO-config-配置桶政策" class="headerlink" title="MinIO config 配置桶政策"></a>MinIO config 配置桶政策</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;s3:ListBucket&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;s3:ListBucketMultipartUploads&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;s3:GetBucketLocation&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;arn:aws:s3:::myblog&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;s3:AbortMultipartUpload&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;s3:DeleteObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;s3:GetObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;s3:ListMultipartUploadParts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;s3:PutObject&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;arn:aws:s3:::myblog/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> miniIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s本地调试</title>
      <link href="/2025/02/10/k8s%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/"/>
      <url>/2025/02/10/k8s%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s本地调试简要总结"><a href="#k8s本地调试简要总结" class="headerlink" title="k8s本地调试简要总结"></a>k8s本地调试简要总结</h1><p>1.将 <code>k8s master</code> 节点的 <code>~/.kube/config</code> 文件复制到本机电脑的用户目录下的 <code>.kube</code> 目录中</p><p>2.本地环境安装 <code>kubectl</code> 工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://kubernetes.io/releases/download/#binaries</span><br><span class="line">配置环境变量，在 Path 中新增指向 kubectl.exe 所在目录,验证是否可以访问整个集群环境</span><br></pre></td></tr></table></figure><p>3.部署kt-connect</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">KtConnect 是一款基于 k8s 环境用于提高本地测试联调效率的小工具。</span><br><span class="line">功能包括：</span><br><span class="line">Connect：建立数据代理通道，实现本地服务直接访问 k8s 集群内网（包括Pod IP和Service域名）</span><br><span class="line">Exchange：让集群服务流量重定向到本地，实现快速验证本地版本和调试排查问题</span><br><span class="line">Mesh：创建路由规则重定向特定流量，实现多人协作场景下互不影响的本地调试     </span><br><span class="line">Preview：暴露本地服务到集群，实现无需发布即可在线预览集成效果</span><br><span class="line">-----------------------------------------------</span><br><span class="line">https://github.com/alibaba/kt-connect</span><br><span class="line">下载后，解压可以看到 ktctl.exe 和 wintun.dll</span><br><span class="line">配置环境变量，在 Path 中新增一个，指向这两个文件所在目录</span><br><span class="line">------------------------------------------------</span><br><span class="line">ktctl -v</span><br><span class="line">ktctl connect  --debug -i 172.18.226.20/base/kt-connect-shadow:v0.3.7 -n &lt;命名空间&gt;</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">exchange 将集群里访问指定服务的所有请求拦截并转发到本地的指定端口。</span><br><span class="line">ktctl exchange --debug -i 172.18.226.20/base/kt-connect-shadow:v0.3.7 &lt;目标服务名&gt; -n &lt;命名空间&gt; --expose &lt;本地端口&gt;</span><br><span class="line">mesh 通过指定的http请求头VERSION: xxxx的请求转发到本地电脑</span><br><span class="line">ktctl mesh &lt;目标服务名&gt; -n &lt;命名空间&gt; --debug -i 172.18.226.20/base/kt-connect-shadow:v0.3.7 --expose &lt;本地端口&gt;:&lt;目标服务端口&gt; --versionMark 固定version值</span><br><span class="line"></span><br><span class="line">preview 将本地服务作为一个全新的Service对外提供服务</span><br><span class="line">ktctl preview &lt;目标服务名&gt; -n &lt;命名空间&gt; --expose &lt;本地端口&gt; -i 172.18.226.20/base/kt-connect-shadow:v0.3.7</span><br></pre></td></tr></table></figure><p>4.本地调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用exchange或者mesh   idea调试  </span><br><span class="line"></span><br><span class="line">JVM Inject:Auto Inject JVM Ops from .jvmrc file. Support use kt-connect socks5 mode</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker compose</title>
      <link href="/2025/02/10/docker-compose/"/>
      <url>/2025/02/10/docker-compose/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker常用部署文件"><a href="#Docker常用部署文件" class="headerlink" title="Docker常用部署文件"></a>Docker常用部署文件</h1><h2 id="1-ollama"><a href="#1-ollama" class="headerlink" title="1.ollama"></a>1.ollama</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ollama:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ollama/ollama</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ollama</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;11434:11434&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ollama:/root/.ollama</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">open-webui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/open-webui/open-webui:main</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">open-webui</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ROOT_PATH:</span> <span class="string">&quot;ollama&quot;</span></span><br><span class="line">      <span class="attr">OLLAMA_BASE_URL:</span> <span class="string">&quot;http://ollama:11434&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3020:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./open-webui:/app/backend/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ollama</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-zookeeper"><a href="#2-zookeeper" class="headerlink" title="2.zookeeper"></a>2.zookeeper</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=0.0.0.0:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"> </span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">2182</span><span class="string">:2181</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"> </span><br><span class="line">    <span class="attr">zoo3:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">2183</span><span class="string">:2181</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-kafka"><a href="#3-kafka" class="headerlink" title="3.kafka"></a>3.kafka</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bitnami/kafka:3.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;19092:9092&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_PROCESS_ROLES=broker,controller</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_NODE_ID=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LOG_DIRS=/opt/kafka-logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_NUM_PARTITIONS=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_MIN_INSYNC_REPLICAS=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-data:/opt/kafka-logs</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">kafka-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">kafka-data:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-kafka-data</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-rocketmq"><a href="#4-rocketmq" class="headerlink" title="4.rocketmq"></a>4.rocketmq</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namesrv:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqnamesrv</span></span><br><span class="line">  <span class="attr">broker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10912</span><span class="string">:10912</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NAMESRV_ADDR=rmqnamesrv:9876</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqbroker</span></span><br><span class="line">  <span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/rocketmq:5.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqproxy</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">broker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NAMESRV_ADDR=rmqnamesrv:9876</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqproxy</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">rocketmq:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="5-nacos"><a href="#5-nacos" class="headerlink" title="5.nacos"></a>5.nacos</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.8&quot;</span><br><span class="line">services:</span><br><span class="line">  nacos:</span><br><span class="line">    image: nacos/nacos-server:$&#123;NACOS_VERSION&#125;</span><br><span class="line">    container_name: nacos-standalone-mysql</span><br><span class="line">    env_file:</span><br><span class="line">      - ../env/nacos-standlone-mysql.env</span><br><span class="line">    volumes:</span><br><span class="line">      - ./standalone-logs/:/home/nacos/logs</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8848:8848&quot;</span><br><span class="line">      - &quot;9848:9848&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      mysql:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    restart: always</span><br><span class="line">  mysql:</span><br><span class="line">    container_name: mysql</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: ./image/mysql/8/Dockerfile</span><br><span class="line">    image: example/mysql:8.0.30</span><br><span class="line">    env_file:</span><br><span class="line">      - ../env/mysql.env</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql:/var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    healthcheck:</span><br><span class="line">      test: [ &quot;CMD&quot;, &quot;mysqladmin&quot; ,&quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot; ]</span><br><span class="line">      interval: 5s</span><br><span class="line">      timeout: 10s</span><br><span class="line">      retries: 10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
